# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

priority -50

extends texmath

global !p

def create_table(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

	rows = int_val(rows)
	cols = int_val(cols)

	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''

	final_str = old_spacing + "\\begin{tabular}{|" + "|".join(['$' + str(i + 1) for i in range(cols)]) + "|}\n"

	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

		final_str += " \\\\\\\n"

	final_str += old_spacing + "\\end{tabular}\n$0"

	snip.expand_anon(final_str)

def add_row(snip):
	row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''

	final_str = old_spacing
	final_str += " & ".join(['$' + str(j + 1) for j in range(row_len)])
	final_str += " \\\\\\"

	snip.expand_anon(final_str)

endglobal

snippet dc
\documentclass[$2]{${1:article}}
$0
endsnippet

snippet up
\usepackage{$0}
endsnippet

snippet upa
\usepackage[$0]{$1}
endsnippet

snippet begin "begin{} / end{}" br
\begin{${1:document}}
${0:${VISUAL}}
\end{$1}
endsnippet

snippet abs "abstract environment" b
\begin{abstract}
$0
\end{abstract}
endsnippet

snippet tabular "tabular / array environment" b
\begin{tabular}{${1:c}}
$0
\end{tabular}
endsnippet

pre_expand "create_table(snip)"
snippet "gentbl(\d+)x(\d+)" "Generate table of *width* by *height*" r
endsnippet

pre_expand "add_row(snip)"
snippet "tr(\d+)" "Add table row of dimension ..." r
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
\centering
\begin{${4:tabular}}{${5:c}}
$0
\end{$4}

\caption{${2:caption}}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${2:htpb}]
\centering
\includegraphics[width=${3:0.8}\linewidth]{${4:name.ext}}
\caption{${4/(\w+)\.\w+/\u$1/}$0}%
\label{fig:${4/(\w+)\.\w+/$1/}}

\end{figure}
endsnippet

snippet enum "Enumerate" b
\begin{enumerate}
\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" b
\begin{itemize}
\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
\item[$1] $0
\end{description}
endsnippet

snippet it "Individual item" b
\item $0
endsnippet

snippet part "Part" b
\part{${1:part name}}

$0
endsnippet

snippet chapter "Chapter" b
\chapter{${1:chapter name}}

$0
endsnippet

snippet section "Section"
\section{${1:${VISUAL:section name}}}

$0
endsnippet

snippet section* "Section"
\section*{${1:${VISUAL:section name}}}

${0}
endsnippet


snippet subsection "Subsection"
\subsection{${1:${VISUAL:subsection name}}}

$0
endsnippet

snippet subsection* "Subsection"
\subsection*{${1:${VISUAL:subsection name}}}

${0}
endsnippet

snippet ssubsection "Subsubsection"
\subsubsection{${1:${VISUAL:subsubsection name}}}

$0
endsnippet

snippet ssubsection* "Subsubsection"
\subsubsection*{${1:${VISUAL:subsubsection name}}}

${0}
endsnippet

snippet par "Paragraph"
\paragraph{${1:${VISUAL:paragraph name}}}

$0
endsnippet

snippet subp "Subparagraph"
\subparagraph{${1:${VISUAL:subparagraph name}}}

$0
endsnippet

snippet ac "Acroynm normal" b
\ac{${1:acronym}}
$0
endsnippet

snippet acl "Acroynm expanded" b
\acl{${1:acronym}}
$0
endsnippet

snippet ni "Non-indented paragraph" b
\noindent
$0
endsnippet

snippet mb
\[
$0
\]
endsnippet

snippet lp "Long parenthesis"
\left(${1:${VISUAL:contents}}\right)$0
endsnippet

snippet "mint(ed)?( (\S+))?" "Minted code typeset" br
\begin{listing}

\begin{minted}[linenos,numbersep=5pt,frame=lines,framesep=2mm]{${1:`!p

snip.rv = match.group(3) if match.group(2) is not None else "language"`}}
${2:${VISUAL:code}}

\end{minted}

\caption{${3:caption name}}
\label{lst:${4:${3/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

\end{listing}

$0
endsnippet

snippet gln "New glossary item" b
\newglossaryentry{${1:identifier}}
{
  name={${2:name}},
  first={${3:first occurrence}},
  sort={${4:sort value}},
  description={${0:description}},
}
endsnippet
snippet glnl "New long glossary item" b
\longnewglossaryentry{${1:identifier}}
{
  name={${2:name}},
  first={${3:first occurrence}},
  sort={${4:sort value}},
}
{
  ${0:description}
}
endsnippet

# Bold text
snippet bf "Bold" w
\textbf{$1} $0
endsnippet

# Italic text
snippet ita "Italics" w
\textit{$1} $0
endsnippet

# Underlined text
snippet und "Underline" w
\underline{$1} $0
endsnippet

snippet vspace
\vspace{$0}
endsnippet

snippet hspace
\hspace{$0}
endsnippet

snippet textcolor "" w
\textcolor{${1:color}}{${0:text}}
endsnippet

snippet sl "" w
\textsl{$0}
endsnippet

snippet mono "" w
\texttt{$0}
endsnippet

snippet frac "" w
\frac{$1}{$2}$0
endsnippet

snippet minipage
\begin{minipage}{${1:0.5}\textwidth}
$0
\end{minipage}
endsnippet

# vim:ft=snippets:
